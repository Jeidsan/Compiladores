#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = false
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
letra: [a-zA-Z]
digito: [0-9]
acentuadas: á | Á | â | Â | ã | Ã | à | À | é | É | ê | Ê | í | Í | î | Î | ô | Ô | õ | Õ | ó | Ó | ú | Ú | û | Û | ç | Ç
underline: _
dig_nao_nulo: [1-9]
inteira: 0 | {dig_nao_nulo} {digito}*
fracionaria: \. {digito}+
string: ([^\"\\\n] | \\\" | \\\\)*
ini_bloco: / \*
fim_bloco: (\*)+ /
inter_bloco: [^\*/]
exc_bloco_1:(\*)+[^/\*]
exc_bloco_2:(/)+[^\\]
cont_bloco:{inter_bloco} | {exc_bloco_1} | {exc_bloco_2}
ini_linha: / /
texto_linha: [^\n\t]
#Tokens
//tokens genéricos
identificador: ({letra} | {acentuadas})_? (({letra} | {digito} | {acentuadas})_?)*
contante_inteira: {inteira}
constante_real: {inteira}{fracionaria}
constante_caracter: \"{string}\"
comentario_bloco:! {ini_bloco}({cont_bloco})*{fim_bloco}
comentario_linha:! {ini_linha}{texto_linha}*

//tokens específicos: palavras reservadas
algoritmo = identificador: "algoritmo"
ate = identificador: "até"
caracter = identificador: "caracter"
e = identificador: "e"
//enquanto = identificador: "enquanto"
entao = identificador: "então"
escreva = identificador: "escreva" 
//faca = identificador: "faça"
falso = identificador: "falso"
fim = identificador: "fim"
funcao = identificador: "função"
inicio = identificador: "início"
inteiro = identificador: "inteiro"
interrompa = identificador: "interrompa"
leia = identificador: "leia"
logico = identificador: "lógico"
nao = identificador: "não"
ou = identificador: "ou"
procedimento = identificador: "procedimento"
quebra = identificador: "quebra"
real = identificador: "real"
repita = identificador: "repita"
retorne = identificador: "retorne"
se = identificador: "se"
senao = identificador: "senão"
variaveis = identificador: "variáveis"
verdadeiro = identificador: "verdadeiro"
	
//tokens específicos: símbolos especiais

"+"
"-"
"*"
"/"
//"\"
//"%"
//"^"
","
":"
";"
"<-"
"="
"<>"
"<"
"<="
">"
">="
"("
")"

//ignorar: caracteres de formatação 
 :[\s\t\n]
#NonTerminals
<programa>
<cabecalho_modulos>
<variaveis_aux>
<lista_comandos>
<comando>
<comando_1>
<lista_modulos>
<modulo>
<cabecalho>
<cabecalho_funcao>
<cabecalho_procedimento>
<lista_parametros>
<lista_parametros_aux_1>
<lista_parametros_aux>
<parametro>
<lista_identificadores_1>
<lista_identificadores>
<tipo>
<comando_saida>
<lista_valores_1>
<lista_valores>
<valor>
<comando_entrada>
<variaveis>
<outras>
<comando_selecao>
<senao>
<comando_repeticao>
<interrompa>
<retorne>
<parametros_reais>
<lista_expressoes_1>
<lista_expressoes>
<funcao>
<procedimento>
<expressao_1>
<elemento>
<relacional_1>
<relacional>
<operador_relacional>
<aritmetica>
<aritmetica_1>
<termo>
<termo_1>
<fator_1>
<fator>
<expressao>
#Grammar
<programa> ::= algoritmo constante_caracter <cabecalho_modulos> <variaveis_aux> inicio <lista_comandos> fim <lista_modulos>;
<cabecalho_modulos> ::= <cabecalho> <cabecalho_modulos> | î ;
<variaveis_aux> ::= <variaveis> | î ;
<lista_comandos> ::= <comando> ";" <lista_comandos> | î ;
<comando_1> ::= "<-" <expressao> | "(" <parametros_reais> ")";
<comando> ::= identificador <comando_1> | <comando_entrada> | <comando_saida> | <comando_selecao> | <comando_repeticao> | <interrompa> | <retorne>;
<lista_modulos> ::= <modulo> <lista_modulos> | î;
<modulo> ::= <funcao> | <procedimento>;
<cabecalho> ::= <cabecalho_funcao> | <cabecalho_procedimento> ;
<cabecalho_funcao> ::= funcao identificador "(" <lista_parametros> ")" ":" <tipo> ";";
<cabecalho_procedimento> ::= procedimento identificador "(" <lista_parametros> ")" ";";
<lista_parametros> ::= <lista_parametros_aux> | î;
<lista_parametros_aux_1> ::= î | ";" <lista_parametros_aux>;
<lista_parametros_aux> ::= <parametro> <lista_parametros_aux_1> ;
<parametro> ::= <lista_identificadores> ":" <tipo>;
<lista_identificadores_1> ::= î | "," <lista_identificadores>;
<lista_identificadores> ::= identificador <lista_identificadores_1>;
<tipo> ::= caracter | logico | inteiro | real;
<comando_saida> ::= escreva "(" <lista_valores> ")";
<lista_valores_1> ::= î | "," <lista_valores> ;
<lista_valores> ::= <valor> <lista_valores_1>;
<valor> ::= <expressao> | quebra;
<comando_entrada> ::= leia "(" <lista_identificadores> ")";
<variaveis> ::= variaveis <lista_identificadores> ":" <tipo> ";" <outras>;
<outras> ::= <lista_identificadores> ":" <tipo> ";" <outras> | î ;
<comando_selecao> ::= se <expressao> entao <lista_comandos> <senao> fim ;
<senao> ::= senao <lista_comandos> | î;
<comando_repeticao> ::= repita <lista_comandos> ate <expressao>;
<interrompa> ::= interrompa;
<retorne> ::= retorne <expressao>;
<parametros_reais> ::= <lista_expressoes> | î;
<lista_expressoes_1> ::= î | "," <lista_expressoes>;
<lista_expressoes> ::= <expressao><lista_expressoes_1>;
<funcao> ::= funcao identificador "(" <lista_parametros> ")" ":" <tipo> ";" <variaveis_aux> inicio <lista_comandos> fim;
<procedimento> ::= procedimento identificador "(" <lista_parametros> ")" ";" <variaveis_aux> inicio <lista_comandos> fim;
<expressao> ::= <elemento> <expressao_1>;
<expressao_1> ::= e <elemento> <expressao_1> | ou <elemento> <expressao_1> | î; 
<elemento> ::= <relacional> | verdadeiro | falso | nao <elemento> ;
<relacional_1> ::= <operador_relacional> <aritmetica> | î ;
<relacional> ::= <aritmetica> <relacional_1>;
<operador_relacional> ::= "=" | "<>" | "<" | "<=" | ">" | ">=";
<aritmetica> ::= <termo> <aritmetica_1>;
<aritmetica_1> ::= "+" <termo> <aritmetica_1> | "-" <termo> <aritmetica_1> | î;
<termo> ::= <fator> <termo_1>;
<termo_1> ::= "*" <fator> <termo_1> | "/" <fator> <termo_1> | î;
<fator_1> ::= î | "(" <parametros_reais> ")";
<fator> ::= identificador <fator_1> | contante_inteira | constante_real | constante_caracter | "(" <expressao> ")" | "+" <fator> | "-" <fator> ;
